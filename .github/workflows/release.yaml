name: release
on:
  release:
    types:
      - created

jobs:
  release-binary:
    name: release-binary
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: set up go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Push Mac binaries to Cloudsmith
        working-directory: dist
        id: push-mac
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "tetrate"
          repo: "getmesh"
          file: "getmesh_darwin_amd64.tar.gz"
          name: "getmesh_darwin_amd64_${{ env.RELEASE_VERSION }}.tar.gz"

      - name: Push Linux binaries to Cloudsmith
        working-directory: dist
        id: push-linux
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "tetrate"
          repo: "getmesh"
          file: "getmesh_linux_amd64.tar.gz"
          name: "getmesh_linux_amd64_${{ env.RELEASE_VERSION }}.tar.gz"

      - name: Push Manifest
        working-directory: dist
        id: push-manifest
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "tetrate"
          repo: "getmesh"
          file: "manifest.json"
          republish: "true"
          name: "manifest.json"

      - name: Push Download Script
        working-directory: dist
        id: push-script
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "tetrate"
          repo: "getmesh"
          file: "download.sh"
          republish: "true"
          name: "download.sh"

  post-release-check:
    needs: [release-binary]
    name: post-release-check
    runs-on: ubuntu-latest
    steps:
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Download the latest getmesh
        run: curl -sL https://dl.getistio.io/public/raw/files/download.sh | bash

      - name: Check version
        run: |
          version=${{ env.RELEASE_VERSION }}
          ~/.getmesh/bin/getmesh version --remote=false | grep ${version:1}

  release-doc:
    needs: [post-release-check]
    name: release-doc
    runs-on: ubuntu-latest
    steps:
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: checkout
        uses: actions/checkout@v2

      - name: clone
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.getmesh_IO_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          git clone git@github.com:tetratelabs/getmesh.io.git getmesh.io

      - name: cp
        run: |
          cp -r doc/en/* getmesh.io/content/en/
          find doc/en/ -type f -name "_index.md" -print0 | xargs -0 sed -i -e "s/\/getmesh-cli\/reference/\/zh\/getmesh-cli\/reference/g"
          cp -r doc/en/* getmesh.io/content/zh/

      - name: commit
        working-directory: getmesh.io
        run: |
          git config --global user.email "getmesh@tetrate.io"
          git config --global user.name "getmesh"
          git checkout main
          git add content/
          git commit -a -m "Update docs from the getmesh ${{ env.RELEASE_VERSION }} release"

      - name: push
        working-directory: getmesh.io
        run: |
          git push origin main
